import numpy as np
import matplotlib.pyplot as plt
import pickle
import argparse
from neural_networks.CIFAR10.resnet import resnet8, resnet20, resnet32, resnet56
from neural_networks.utils import set_model_axx_levels

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--attack-type', default="PGD", type=str, help="")
    parser.add_argument('--attack-parameters', default="0.031_0.008_10", type=str, help="")

    parser.add_argument('--neural-network', default="resnet8", type=str, help="Choose one from resnet8, resnet20, resnet32, resnet56")
    parser.add_argument('--activation-function', default="ReLU", type=str, help="Activation function used for each act layer.")
    parser.add_argument('--dataset', default="cifar10", type=str, help="Select cifar10 or cifar100")
    parser.add_argument('--act-bit', default=8, type=int, help="activation precision used for all layers")
    parser.add_argument('--weight-bit', default=8, type=int, help="weight precision used for all layers")
    parser.add_argument('--bias-bit', default=32, type=int, help="bias precision used for all layers")
    parser.add_argument('--fake-quant', default=True, type=bool, help="Set to True to use fake quantization, set to False to use integer quantization")

    parser.add_argument('--adv-neural-network', default="resnet8", type=str, help="Choose one from resnet8, resnet20, resnet32, resnet56")
    parser.add_argument('--adv-conv-axx-level', default=0, type=int, help="Approximation level used in all layers (0 is exact)")
    parser.add_argument('--adv-conv-axx-level-list', type=int, nargs='+', help="List of integers specifying levels of approximation for each convolutional layer")
    parser.add_argument('--adv-linear-axx-level', default=0, type=int, help="Approximation level used in all layers (0 is exact)")
    parser.add_argument('--adv-linear-axx-level-list', type=int, nargs='+', help="List of integers specifying levels of approximation for each convolutional layer")

    parser.add_argument('--conv-axx-level', default=0, type=int, help="Approximation level used in all layers (0 is exact)")
    parser.add_argument('--conv-axx-level-list', type=int, nargs='+', help="List of integers specifying levels of approximation for each convolutional layer")
    parser.add_argument('--linear-axx-level', default=0, type=int, help="Approximation level used in all layers (0 is exact)")
    parser.add_argument('--linear-axx-level-list', type=int, nargs='+', help="List of integers specifying levels of approximation for each convolutional layer")
    return parser.parse_args()

args = get_args()
attack_type = args.attack_type
attack_parameters = args.attack_parameters

if args.dataset == "cifar10":
    num_classes = 10
elif args.dataset == "cifar100":
    num_classes = 100
else:
    exit("Dataset not supported")
device = "cpu"
mode = {"execution_type": "float", "act_bit":args.act_bit, "weight_bit":args.weight_bit, "bias_bit":args.bias_bit, "fake_quant":args.fake_quant, "classes":num_classes, "act_type":args.activation_function}
if args.neural_network == "resnet8":
    model = resnet8(mode).to(device)
elif args.neural_network == "resnet20":
    model = resnet20(mode).to(device)
elif args.neural_network == "resnet32":
    model = resnet32(mode).to(device)
elif args.neural_network == "resnet56":
    model = resnet56(mode).to(device)
else:
    exit("error unknown CNN model name")


conv_axx_levels, linear_axx_levels = set_model_axx_levels(model, args.conv_axx_level_list, args.conv_axx_level, args.linear_axx_level_list, args.linear_axx_level)
adv_conv_axx_levels, adv_linear_axx_levels = set_model_axx_levels(model, args.adv_conv_axx_level_list, args.adv_conv_axx_level, args.adv_linear_axx_level_list, args.adv_linear_axx_level)

conv_axx_levels_string = "_" + "_".join(map(str, conv_axx_levels))
linear_axx_levels_string = "_" + "_".join(map(str, adv_linear_axx_levels))

adv_conv_axx_levels_string = "_" + "_".join(map(str, adv_conv_axx_levels))
linear_axx_levels_string = "_" + "_".join(map(str, adv_linear_axx_levels))

## Adversarial Data Generated by float Model
# Data
adv_execution_type = "float"
categories = [
    'float\n param float', '', 
    'quant\n param float', '', 
    'transaxx\n param float', '', 
    'float\n param quant', '', 
    'quant\n param quant', '', 
    'transaxx\n param quant', '', 
    'float\n param transaxx', '', 
    'quant\n param transaxx', '', 
    'transaxx\n param transaxx', ''
]
pkl_file_float_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_float_param_float.pkl"
with open(pkl_file_float_float, "rb") as file: 
    loaded_data_float_float = pickle.load(file)

pkl_file_quant_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_quant_param_float.pkl"
with open(pkl_file_quant_float, "rb") as file:  
    loaded_data_quant_float = pickle.load(file)

pkl_file_transaxx_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_float.pkl"
with open(pkl_file_transaxx_float, "rb") as file: 
    loaded_data_transaxx_float = pickle.load(file)



pkl_file_float_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_float_param_quant.pkl"
with open(pkl_file_float_quant, "rb") as file:  
    loaded_data_float_quant = pickle.load(file)

pkl_file_quant_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_quant_param_quant.pkl"
with open(pkl_file_quant_quant, "rb") as file:  
    loaded_data_quant_quant = pickle.load(file)

pkl_file_transaxx_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_quant.pkl"
with open(pkl_file_transaxx_quant, "rb") as file:  
    loaded_data_transaxx_quant = pickle.load(file)



pkl_file_float_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_float_param_transaxx.pkl"
with open(pkl_file_float_transaxx, "rb") as file:  
    loaded_data_float_transaxx = pickle.load(file)

pkl_file_quant_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_quant_param_transaxx.pkl"
with open(pkl_file_quant_transaxx, "rb") as file:  
    loaded_data_quant_transaxx = pickle.load(file)

pkl_file_transaxx_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_transaxx.pkl"
with open(pkl_file_transaxx_transaxx, "rb") as file:  
    loaded_data_transaxx_transaxx = pickle.load(file)

adv_acc = [loaded_data_float_float['adv_test_acc'], 0, loaded_data_quant_float['adv_test_acc'], 0, loaded_data_transaxx_float['adv_test_acc'], 0, loaded_data_float_quant['adv_test_acc'], 0, loaded_data_quant_quant['adv_test_acc'], 0, loaded_data_transaxx_quant['adv_test_acc'], 0, loaded_data_float_transaxx['adv_test_acc'], 0, loaded_data_quant_transaxx['adv_test_acc'], 0, loaded_data_transaxx_transaxx['adv_test_acc'], 0]
reg_acc = [loaded_data_float_float['test_acc'], 0, loaded_data_quant_float['test_acc'], 0, loaded_data_transaxx_float['test_acc'], 0, loaded_data_float_quant['test_acc'], 0, loaded_data_quant_quant['test_acc'], 0, loaded_data_transaxx_quant['test_acc'], 0, loaded_data_float_transaxx['test_acc'], 0, loaded_data_quant_transaxx['test_acc'], 0, loaded_data_transaxx_transaxx['test_acc'], 0]

# Positions
bar_width = 0.4
gap = 0.2  # Space between pairs
positions = np.arange(len(categories) // 2) * (2 * bar_width + gap)

# Adjust positions for the two bars in each pair
positions_1 = positions
positions_2 = positions + bar_width

# Plot
plt.figure(1, figsize=(12, 6))
plt.bar(positions_1, adv_acc[::2], width=bar_width, label='Adversarial Data', color='orange')
plt.bar(positions_2, reg_acc[::2], width=bar_width, label='Standard Data', color='#3455eb')

plt.text(0 + bar_width, loaded_data_float_float['test_acc'], str(loaded_data_float_float['test_acc']), ha='center', va='bottom')
plt.text(1 + bar_width, loaded_data_quant_float['test_acc'], str(loaded_data_quant_float['test_acc']), ha='center', va='bottom')
plt.text(2 + bar_width, loaded_data_transaxx_float['test_acc'], str(loaded_data_transaxx_float['test_acc']), ha='center', va='bottom')

plt.text(3 + bar_width, loaded_data_float_quant['test_acc'], str(loaded_data_float_quant['test_acc']), ha='center', va='bottom')
plt.text(4 + bar_width, loaded_data_quant_quant['test_acc'], str(loaded_data_quant_quant['test_acc']), ha='center', va='bottom')
plt.text(5 + bar_width, loaded_data_transaxx_quant['test_acc'], str(loaded_data_transaxx_quant['test_acc']), ha='center', va='bottom')

plt.text(6 + bar_width, loaded_data_float_transaxx['test_acc'], str(loaded_data_float_transaxx['test_acc']), ha='center', va='bottom')
plt.text(7 + bar_width, loaded_data_quant_transaxx['test_acc'], str(loaded_data_quant_transaxx['test_acc']), ha='center', va='bottom')
plt.text(8 + bar_width, loaded_data_transaxx_transaxx['test_acc'], str(loaded_data_transaxx_transaxx['test_acc']), ha='center', va='bottom')

plt.text(0, loaded_data_float_float['adv_test_acc'], str(loaded_data_float_float['adv_test_acc']), ha='center', va='bottom')
plt.text(1, loaded_data_quant_float['adv_test_acc'], str(loaded_data_quant_float['adv_test_acc']), ha='center', va='bottom')
plt.text(2, loaded_data_transaxx_float['adv_test_acc'], str(loaded_data_transaxx_float['adv_test_acc']), ha='center', va='bottom')

plt.text(3, loaded_data_float_quant['adv_test_acc'], str(loaded_data_float_quant['adv_test_acc']), ha='center', va='bottom')
plt.text(4, loaded_data_quant_quant['adv_test_acc'], str(loaded_data_quant_quant['adv_test_acc']), ha='center', va='bottom')
plt.text(5, loaded_data_transaxx_quant['adv_test_acc'], str(loaded_data_transaxx_quant['adv_test_acc']), ha='center', va='bottom')

plt.text(6, loaded_data_float_transaxx['adv_test_acc'], str(loaded_data_float_transaxx['adv_test_acc']), ha='center', va='bottom')
plt.text(7, loaded_data_quant_transaxx['adv_test_acc'], str(loaded_data_quant_transaxx['adv_test_acc']), ha='center', va='bottom')
plt.text(8, loaded_data_transaxx_transaxx['adv_test_acc'], str(loaded_data_transaxx_transaxx['adv_test_acc']), ha='center', va='bottom')

# Formatting
plt.xticks(positions + bar_width / 2, categories[::2], rotation=45, ha='right')  # Use midpoints and labels for each pair
plt.xlabel('Execution Type')
plt.ylabel('Test Accuracy')
plt.title(f'Adversarial Accuracy of Different Models with {attack_type} ({attack_parameters}) - Adversarial Data Generated by {args.adv_neural_network} float Model')
plt.legend()
plt.tight_layout()
plt.show(block=False)




## Adversarial Data Generated by quant Model
# Data
adv_execution_type = "quant"
categories = [
    'float\n param float', '', 
    'quant\n param float', '', 
    'transaxx\n param float', '', 
    'float\n param quant', '', 
    'quant\n param quant', '', 
    'transaxx\n param quant', '', 
    'float\n param transaxx', '', 
    'quant\n param transaxx', '', 
    'transaxx\n param transaxx', ''
]
pkl_file_float_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_float_param_float.pkl"
with open(pkl_file_float_float, "rb") as file: 
    loaded_data_float_float = pickle.load(file)

pkl_file_quant_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_quant_param_float.pkl"
with open(pkl_file_quant_float, "rb") as file:  
    loaded_data_quant_float = pickle.load(file)

pkl_file_transaxx_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_float.pkl"
with open(pkl_file_transaxx_float, "rb") as file: 
    loaded_data_transaxx_float = pickle.load(file)



pkl_file_float_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_float_param_quant.pkl"
with open(pkl_file_float_quant, "rb") as file:  
    loaded_data_float_quant = pickle.load(file)

pkl_file_quant_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_quant_param_quant.pkl"
with open(pkl_file_quant_quant, "rb") as file:  
    loaded_data_quant_quant = pickle.load(file)

pkl_file_transaxx_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_quant.pkl"
with open(pkl_file_transaxx_quant, "rb") as file:  
    loaded_data_transaxx_quant = pickle.load(file)



pkl_file_float_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_float_param_transaxx.pkl"
with open(pkl_file_float_transaxx, "rb") as file:  
    loaded_data_float_transaxx = pickle.load(file)

pkl_file_quant_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_quant_param_transaxx.pkl"
with open(pkl_file_quant_transaxx, "rb") as file:  
    loaded_data_quant_transaxx = pickle.load(file)

pkl_file_transaxx_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_transaxx.pkl"
with open(pkl_file_transaxx_transaxx, "rb") as file:  
    loaded_data_transaxx_transaxx = pickle.load(file)

adv_acc = [loaded_data_float_float['adv_test_acc'], 0, loaded_data_quant_float['adv_test_acc'], 0, loaded_data_transaxx_float['adv_test_acc'], 0, loaded_data_float_quant['adv_test_acc'], 0, loaded_data_quant_quant['adv_test_acc'], 0, loaded_data_transaxx_quant['adv_test_acc'], 0, loaded_data_float_transaxx['adv_test_acc'], 0, loaded_data_quant_transaxx['adv_test_acc'], 0, loaded_data_transaxx_transaxx['adv_test_acc'], 0]
reg_acc = [loaded_data_float_float['test_acc'], 0, loaded_data_quant_float['test_acc'], 0, loaded_data_transaxx_float['test_acc'], 0, loaded_data_float_quant['test_acc'], 0, loaded_data_quant_quant['test_acc'], 0, loaded_data_transaxx_quant['test_acc'], 0, loaded_data_float_transaxx['test_acc'], 0, loaded_data_quant_transaxx['test_acc'], 0, loaded_data_transaxx_transaxx['test_acc'], 0]
print(f"adv_acc = {loaded_data_transaxx_transaxx['adv_test_acc']}")
print(f"test_acc = {loaded_data_transaxx_transaxx['test_acc']}")
# Positions
bar_width = 0.4
gap = 0.2  # Space between pairs
positions = np.arange(len(categories) // 2) * (2 * bar_width + gap)

# Adjust positions for the two bars in each pair
positions_1 = positions
positions_2 = positions + bar_width

# Plot
plt.figure(2, figsize=(12, 6))
plt.bar(positions_1, adv_acc[::2], width=bar_width, label='Adversarial Data', color='orange')
plt.bar(positions_2, reg_acc[::2], width=bar_width, label='Standard Data', color='#3455eb')

plt.text(0 + bar_width, loaded_data_float_float['test_acc'], str(loaded_data_float_float['test_acc']), ha='center', va='bottom')
plt.text(1 + bar_width, loaded_data_quant_float['test_acc'], str(loaded_data_quant_float['test_acc']), ha='center', va='bottom')
plt.text(2 + bar_width, loaded_data_transaxx_float['test_acc'], str(loaded_data_transaxx_float['test_acc']), ha='center', va='bottom')

plt.text(3 + bar_width, loaded_data_float_quant['test_acc'], str(loaded_data_float_quant['test_acc']), ha='center', va='bottom')
plt.text(4 + bar_width, loaded_data_quant_quant['test_acc'], str(loaded_data_quant_quant['test_acc']), ha='center', va='bottom')
plt.text(5 + bar_width, loaded_data_transaxx_quant['test_acc'], str(loaded_data_transaxx_quant['test_acc']), ha='center', va='bottom')

plt.text(6 + bar_width, loaded_data_float_transaxx['test_acc'], str(loaded_data_float_transaxx['test_acc']), ha='center', va='bottom')
plt.text(7 + bar_width, loaded_data_quant_transaxx['test_acc'], str(loaded_data_quant_transaxx['test_acc']), ha='center', va='bottom')
plt.text(8 + bar_width, loaded_data_transaxx_transaxx['test_acc'], str(loaded_data_transaxx_transaxx['test_acc']), ha='center', va='bottom')

plt.text(0, loaded_data_float_float['adv_test_acc'], str(loaded_data_float_float['adv_test_acc']), ha='center', va='bottom')
plt.text(1, loaded_data_quant_float['adv_test_acc'], str(loaded_data_quant_float['adv_test_acc']), ha='center', va='bottom')
plt.text(2, loaded_data_transaxx_float['adv_test_acc'], str(loaded_data_transaxx_float['adv_test_acc']), ha='center', va='bottom')

plt.text(3, loaded_data_float_quant['adv_test_acc'], str(loaded_data_float_quant['adv_test_acc']), ha='center', va='bottom')
plt.text(4, loaded_data_quant_quant['adv_test_acc'], str(loaded_data_quant_quant['adv_test_acc']), ha='center', va='bottom')
plt.text(5, loaded_data_transaxx_quant['adv_test_acc'], str(loaded_data_transaxx_quant['adv_test_acc']), ha='center', va='bottom')

plt.text(6, loaded_data_float_transaxx['adv_test_acc'], str(loaded_data_float_transaxx['adv_test_acc']), ha='center', va='bottom')
plt.text(7, loaded_data_quant_transaxx['adv_test_acc'], str(loaded_data_quant_transaxx['adv_test_acc']), ha='center', va='bottom')
plt.text(8, loaded_data_transaxx_transaxx['adv_test_acc'], str(loaded_data_transaxx_transaxx['adv_test_acc']), ha='center', va='bottom')

# Formatting
plt.xticks(positions + bar_width / 2, categories[::2], rotation=45, ha='right')  # Use midpoints and labels for each pair
plt.xlabel('Execution Type')
plt.ylabel('Test Accuracy')
plt.title(f'Adversarial Accuracy of Different Models with {attack_type} ({attack_parameters}) - Adversarial Data Generated by {args.adv_neural_network} quant Model')
plt.legend()
plt.tight_layout()
plt.show(block=False)




## Adversarial Data Generated by transaxx Model
# Data
adv_execution_type = "transaxx"
categories = [
    'float\n param float', '', 
    'quant\n param float', '', 
    'transaxx\n param float', '', 
    'float\n param quant', '', 
    'quant\n param quant', '', 
    'transaxx\n param quant', '', 
    'float\n param transaxx', '', 
    'quant\n param transaxx', '', 
    'transaxx\n param transaxx', ''
]
pkl_file_float_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_float_param_float.pkl"
with open(pkl_file_float_float, "rb") as file: 
    loaded_data_float_float = pickle.load(file)

pkl_file_quant_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_quant_param_float.pkl"
with open(pkl_file_quant_float, "rb") as file:  
    loaded_data_quant_float = pickle.load(file)

pkl_file_transaxx_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_float.pkl"
with open(pkl_file_transaxx_float, "rb") as file: 
    loaded_data_transaxx_float = pickle.load(file)



pkl_file_float_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_float_param_quant.pkl"
with open(pkl_file_float_quant, "rb") as file:  
    loaded_data_float_quant = pickle.load(file)

pkl_file_quant_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_quant_param_quant.pkl"
with open(pkl_file_quant_quant, "rb") as file:  
    loaded_data_quant_quant = pickle.load(file)

pkl_file_transaxx_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_quant.pkl"
with open(pkl_file_transaxx_quant, "rb") as file:  
    loaded_data_transaxx_quant = pickle.load(file)



pkl_file_float_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_float_param_transaxx.pkl"
with open(pkl_file_float_transaxx, "rb") as file:  
    loaded_data_float_transaxx = pickle.load(file)

pkl_file_quant_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_quant_param_transaxx.pkl"
with open(pkl_file_quant_transaxx, "rb") as file:  
    loaded_data_quant_transaxx = pickle.load(file)

pkl_file_transaxx_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{args.adv_neural_network}/{adv_execution_type+adv_conv_axx_levels_string}/{args.neural_network}_transaxx{conv_axx_levels_string}_param_transaxx.pkl"
with open(pkl_file_transaxx_transaxx, "rb") as file:  
    loaded_data_transaxx_transaxx = pickle.load(file)

adv_acc = [loaded_data_float_float['adv_test_acc'], 0, loaded_data_quant_float['adv_test_acc'], 0, loaded_data_transaxx_float['adv_test_acc'], 0, loaded_data_float_quant['adv_test_acc'], 0, loaded_data_quant_quant['adv_test_acc'], 0, loaded_data_transaxx_quant['adv_test_acc'], 0, loaded_data_float_transaxx['adv_test_acc'], 0, loaded_data_quant_transaxx['adv_test_acc'], 0, loaded_data_transaxx_transaxx['adv_test_acc'], 0]
reg_acc = [loaded_data_float_float['test_acc'], 0, loaded_data_quant_float['test_acc'], 0, loaded_data_transaxx_float['test_acc'], 0, loaded_data_float_quant['test_acc'], 0, loaded_data_quant_quant['test_acc'], 0, loaded_data_transaxx_quant['test_acc'], 0, loaded_data_float_transaxx['test_acc'], 0, loaded_data_quant_transaxx['test_acc'], 0, loaded_data_transaxx_transaxx['test_acc'], 0]

# Positions
bar_width = 0.4
gap = 0.2  # Space between pairs
positions = np.arange(len(categories) // 2) * (2 * bar_width + gap)

# Adjust positions for the two bars in each pair
positions_1 = positions
positions_2 = positions + bar_width

# Plot
plt.figure(3, figsize=(12, 6))
plt.bar(positions_1, adv_acc[::2], width=bar_width, label='Adversarial Data', color='orange')
plt.bar(positions_2, reg_acc[::2], width=bar_width, label='Standard Data', color='#3455eb')

plt.text(0 + bar_width, loaded_data_float_float['test_acc'], str(loaded_data_float_float['test_acc']), ha='center', va='bottom')
plt.text(1 + bar_width, loaded_data_quant_float['test_acc'], str(loaded_data_quant_float['test_acc']), ha='center', va='bottom')
plt.text(2 + bar_width, loaded_data_transaxx_float['test_acc'], str(loaded_data_transaxx_float['test_acc']), ha='center', va='bottom')

plt.text(3 + bar_width, loaded_data_float_quant['test_acc'], str(loaded_data_float_quant['test_acc']), ha='center', va='bottom')
plt.text(4 + bar_width, loaded_data_quant_quant['test_acc'], str(loaded_data_quant_quant['test_acc']), ha='center', va='bottom')
plt.text(5 + bar_width, loaded_data_transaxx_quant['test_acc'], str(loaded_data_transaxx_quant['test_acc']), ha='center', va='bottom')

plt.text(6 + bar_width, loaded_data_float_transaxx['test_acc'], str(loaded_data_float_transaxx['test_acc']), ha='center', va='bottom')
plt.text(7 + bar_width, loaded_data_quant_transaxx['test_acc'], str(loaded_data_quant_transaxx['test_acc']), ha='center', va='bottom')
plt.text(8 + bar_width, loaded_data_transaxx_transaxx['test_acc'], str(loaded_data_transaxx_transaxx['test_acc']), ha='center', va='bottom')

plt.text(0, loaded_data_float_float['adv_test_acc'], str(loaded_data_float_float['adv_test_acc']), ha='center', va='bottom')
plt.text(1, loaded_data_quant_float['adv_test_acc'], str(loaded_data_quant_float['adv_test_acc']), ha='center', va='bottom')
plt.text(2, loaded_data_transaxx_float['adv_test_acc'], str(loaded_data_transaxx_float['adv_test_acc']), ha='center', va='bottom')

plt.text(3, loaded_data_float_quant['adv_test_acc'], str(loaded_data_float_quant['adv_test_acc']), ha='center', va='bottom')
plt.text(4, loaded_data_quant_quant['adv_test_acc'], str(loaded_data_quant_quant['adv_test_acc']), ha='center', va='bottom')
plt.text(5, loaded_data_transaxx_quant['adv_test_acc'], str(loaded_data_transaxx_quant['adv_test_acc']), ha='center', va='bottom')

plt.text(6, loaded_data_float_transaxx['adv_test_acc'], str(loaded_data_float_transaxx['adv_test_acc']), ha='center', va='bottom')
plt.text(7, loaded_data_quant_transaxx['adv_test_acc'], str(loaded_data_quant_transaxx['adv_test_acc']), ha='center', va='bottom')
plt.text(8, loaded_data_transaxx_transaxx['adv_test_acc'], str(loaded_data_transaxx_transaxx['adv_test_acc']), ha='center', va='bottom')

# Formatting
plt.xticks(positions + bar_width / 2, categories[::2], rotation=45, ha='right')  # Use midpoints and labels for each pair
plt.xlabel('Execution Type')
plt.ylabel('Test Accuracy')
plt.title(f'Adversarial Accuracy of Different Models with {attack_type} ({attack_parameters}) - Adversarial Data Generated by {args.adv_neural_network} transaxx Model')
plt.legend()
plt.tight_layout()
plt.show(block=True)
