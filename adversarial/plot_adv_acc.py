import numpy as np
import matplotlib.pyplot as plt
import pickle
import argparse

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--attack-type', default="PGD", type=str, help="")
    parser.add_argument('--attack-parameters', default="0.031_0.008_10", type=str, help="")
    return parser.parse_args()

args = get_args()
attack_type = args.attack_type
attack_parameters = args.attack_parameters
## Adversarial Data Generated by float Model
# Data
adv_execution_type = "float"
categories = [
    'float\n param float', '', 
    'quant\n param float', '', 
    'transaxx\n param float', '', 
    'float\n param quant', '', 
    'quant\n param quant', '', 
    'transaxx\n param quant', '', 
    'float\n param transaxx', '', 
    'quant\n param transaxx', '', 
    'transaxx\n param transaxx', ''
]
pkl_file_float_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_float.pkl"
with open(pkl_file_float_float, "rb") as file: 
    loaded_data_float_float = pickle.load(file)

pkl_file_quant_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_float.pkl"
with open(pkl_file_quant_float, "rb") as file:  
    loaded_data_quant_float = pickle.load(file)

pkl_file_transaxx_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_float.pkl"
with open(pkl_file_transaxx_float, "rb") as file: 
    loaded_data_transaxx_float = pickle.load(file)



pkl_file_float_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_quant.pkl"
with open(pkl_file_float_quant, "rb") as file:  
    loaded_data_float_quant = pickle.load(file)

pkl_file_quant_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_quant.pkl"
with open(pkl_file_quant_quant, "rb") as file:  
    loaded_data_quant_quant = pickle.load(file)

pkl_file_transaxx_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_quant.pkl"
with open(pkl_file_transaxx_quant, "rb") as file:  
    loaded_data_transaxx_quant = pickle.load(file)



pkl_file_float_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_transaxx.pkl"
with open(pkl_file_float_transaxx, "rb") as file:  
    loaded_data_float_transaxx = pickle.load(file)

pkl_file_quant_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_transaxx.pkl"
with open(pkl_file_quant_transaxx, "rb") as file:  
    loaded_data_quant_transaxx = pickle.load(file)

pkl_file_transaxx_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_transaxx.pkl"
with open(pkl_file_transaxx_transaxx, "rb") as file:  
    loaded_data_transaxx_transaxx = pickle.load(file)

adv_acc = [loaded_data_float_float['adv_test_acc'], 0, loaded_data_quant_float['adv_test_acc'], 0, loaded_data_transaxx_float['adv_test_acc'], 0, loaded_data_float_quant['adv_test_acc'], 0, loaded_data_quant_quant['adv_test_acc'], 0, loaded_data_transaxx_quant['adv_test_acc'], 0, loaded_data_float_transaxx['adv_test_acc'], 0, loaded_data_quant_transaxx['adv_test_acc'], 0, loaded_data_transaxx_transaxx['adv_test_acc'], 0]
reg_acc = [loaded_data_float_float['test_acc'], 0, loaded_data_quant_float['test_acc'], 0, loaded_data_transaxx_float['test_acc'], 0, loaded_data_float_quant['test_acc'], 0, loaded_data_quant_quant['test_acc'], 0, loaded_data_transaxx_quant['test_acc'], 0, loaded_data_float_transaxx['test_acc'], 0, loaded_data_quant_transaxx['test_acc'], 0, loaded_data_transaxx_transaxx['test_acc'], 0]

# Positions
bar_width = 0.4
gap = 0.2  # Space between pairs
positions = np.arange(len(categories) // 2) * (2 * bar_width + gap)

# Adjust positions for the two bars in each pair
positions_1 = positions
positions_2 = positions + bar_width

# Plot
plt.figure(1, figsize=(12, 6))
plt.bar(positions_1, adv_acc[::2], width=bar_width, label='Adversarial Data', color='orange')
plt.bar(positions_2, reg_acc[::2], width=bar_width, label='Standard Data', color='#3455eb')

# Formatting
plt.xticks(positions + bar_width / 2, categories[::2], rotation=45, ha='right')  # Use midpoints and labels for each pair
plt.xlabel('Execution Type')
plt.ylabel('Test Accuracy')
plt.title(f'Adversarial Accuracy of Different Models with {attack_type} ({attack_parameters}) - Adversarial Data Generated by float Model')
plt.legend()
plt.tight_layout()
plt.show(block=False)




## Adversarial Data Generated by quant Model
# Data
adv_execution_type = "quant"
categories = [
    'float\n param float', '', 
    'quant\n param float', '', 
    'transaxx\n param float', '', 
    'float\n param quant', '', 
    'quant\n param quant', '', 
    'transaxx\n param quant', '', 
    'float\n param transaxx', '', 
    'quant\n param transaxx', '', 
    'transaxx\n param transaxx', ''
]
pkl_file_float_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_float.pkl"
with open(pkl_file_float_float, "rb") as file: 
    loaded_data_float_float = pickle.load(file)

pkl_file_quant_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_float.pkl"
with open(pkl_file_quant_float, "rb") as file:  
    loaded_data_quant_float = pickle.load(file)

pkl_file_transaxx_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_float.pkl"
with open(pkl_file_transaxx_float, "rb") as file: 
    loaded_data_transaxx_float = pickle.load(file)



pkl_file_float_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_quant.pkl"
with open(pkl_file_float_quant, "rb") as file:  
    loaded_data_float_quant = pickle.load(file)

pkl_file_quant_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_quant.pkl"
with open(pkl_file_quant_quant, "rb") as file:  
    loaded_data_quant_quant = pickle.load(file)

pkl_file_transaxx_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_quant.pkl"
with open(pkl_file_transaxx_quant, "rb") as file:  
    loaded_data_transaxx_quant = pickle.load(file)



pkl_file_float_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_transaxx.pkl"
with open(pkl_file_float_transaxx, "rb") as file:  
    loaded_data_float_transaxx = pickle.load(file)

pkl_file_quant_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_transaxx.pkl"
with open(pkl_file_quant_transaxx, "rb") as file:  
    loaded_data_quant_transaxx = pickle.load(file)

pkl_file_transaxx_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_transaxx.pkl"
with open(pkl_file_transaxx_transaxx, "rb") as file:  
    loaded_data_transaxx_transaxx = pickle.load(file)

adv_acc = [loaded_data_float_float['adv_test_acc'], 0, loaded_data_quant_float['adv_test_acc'], 0, loaded_data_transaxx_float['adv_test_acc'], 0, loaded_data_float_quant['adv_test_acc'], 0, loaded_data_quant_quant['adv_test_acc'], 0, loaded_data_transaxx_quant['adv_test_acc'], 0, loaded_data_float_transaxx['adv_test_acc'], 0, loaded_data_quant_transaxx['adv_test_acc'], 0, loaded_data_transaxx_transaxx['adv_test_acc'], 0]
reg_acc = [loaded_data_float_float['test_acc'], 0, loaded_data_quant_float['test_acc'], 0, loaded_data_transaxx_float['test_acc'], 0, loaded_data_float_quant['test_acc'], 0, loaded_data_quant_quant['test_acc'], 0, loaded_data_transaxx_quant['test_acc'], 0, loaded_data_float_transaxx['test_acc'], 0, loaded_data_quant_transaxx['test_acc'], 0, loaded_data_transaxx_transaxx['test_acc'], 0]

# Positions
bar_width = 0.4
gap = 0.2  # Space between pairs
positions = np.arange(len(categories) // 2) * (2 * bar_width + gap)

# Adjust positions for the two bars in each pair
positions_1 = positions
positions_2 = positions + bar_width

# Plot
plt.figure(2, figsize=(12, 6))
plt.bar(positions_1, adv_acc[::2], width=bar_width, label='Adversarial Data', color='orange')
plt.bar(positions_2, reg_acc[::2], width=bar_width, label='Standard Data', color='#3455eb')

# Formatting
plt.xticks(positions + bar_width / 2, categories[::2], rotation=45, ha='right')  # Use midpoints and labels for each pair
plt.xlabel('Execution Type')
plt.ylabel('Test Accuracy')
plt.title(f'Adversarial Accuracy of Different Models with {attack_type} ({attack_parameters}) - Adversarial Data Generated by quant Model')
plt.legend()
plt.tight_layout()
plt.show(block=False)




## Adversarial Data Generated by transaxx Model
# Data
adv_execution_type = "transaxx"
categories = [
    'float\n param float', '', 
    'quant\n param float', '', 
    'transaxx\n param float', '', 
    'float\n param quant', '', 
    'quant\n param quant', '', 
    'transaxx\n param quant', '', 
    'float\n param transaxx', '', 
    'quant\n param transaxx', '', 
    'transaxx\n param transaxx', ''
]
pkl_file_float_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_float.pkl"
with open(pkl_file_float_float, "rb") as file: 
    loaded_data_float_float = pickle.load(file)

pkl_file_quant_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_float.pkl"
with open(pkl_file_quant_float, "rb") as file:  
    loaded_data_quant_float = pickle.load(file)

pkl_file_transaxx_float = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_float.pkl"
with open(pkl_file_transaxx_float, "rb") as file: 
    loaded_data_transaxx_float = pickle.load(file)



pkl_file_float_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_quant.pkl"
with open(pkl_file_float_quant, "rb") as file:  
    loaded_data_float_quant = pickle.load(file)

pkl_file_quant_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_quant.pkl"
with open(pkl_file_quant_quant, "rb") as file:  
    loaded_data_quant_quant = pickle.load(file)

pkl_file_transaxx_quant = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_quant.pkl"
with open(pkl_file_transaxx_quant, "rb") as file:  
    loaded_data_transaxx_quant = pickle.load(file)



pkl_file_float_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/float_param_transaxx.pkl"
with open(pkl_file_float_transaxx, "rb") as file:  
    loaded_data_float_transaxx = pickle.load(file)

pkl_file_quant_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/quant_param_transaxx.pkl"
with open(pkl_file_quant_transaxx, "rb") as file:  
    loaded_data_quant_transaxx = pickle.load(file)

pkl_file_transaxx_transaxx = f"adversarial/results_pkl/{attack_type}_{attack_parameters}/{adv_execution_type}/transaxx_param_transaxx.pkl"
with open(pkl_file_transaxx_transaxx, "rb") as file:  
    loaded_data_transaxx_transaxx = pickle.load(file)

adv_acc = [loaded_data_float_float['adv_test_acc'], 0, loaded_data_quant_float['adv_test_acc'], 0, loaded_data_transaxx_float['adv_test_acc'], 0, loaded_data_float_quant['adv_test_acc'], 0, loaded_data_quant_quant['adv_test_acc'], 0, loaded_data_transaxx_quant['adv_test_acc'], 0, loaded_data_float_transaxx['adv_test_acc'], 0, loaded_data_quant_transaxx['adv_test_acc'], 0, loaded_data_transaxx_transaxx['adv_test_acc'], 0]
reg_acc = [loaded_data_float_float['test_acc'], 0, loaded_data_quant_float['test_acc'], 0, loaded_data_transaxx_float['test_acc'], 0, loaded_data_float_quant['test_acc'], 0, loaded_data_quant_quant['test_acc'], 0, loaded_data_transaxx_quant['test_acc'], 0, loaded_data_float_transaxx['test_acc'], 0, loaded_data_quant_transaxx['test_acc'], 0, loaded_data_transaxx_transaxx['test_acc'], 0]

# Positions
bar_width = 0.4
gap = 0.2  # Space between pairs
positions = np.arange(len(categories) // 2) * (2 * bar_width + gap)

# Adjust positions for the two bars in each pair
positions_1 = positions
positions_2 = positions + bar_width

# Plot
plt.figure(3, figsize=(12, 6))
plt.bar(positions_1, adv_acc[::2], width=bar_width, label='Adversarial Data', color='orange')
plt.bar(positions_2, reg_acc[::2], width=bar_width, label='Standard Data', color='#3455eb')

# Formatting
plt.xticks(positions + bar_width / 2, categories[::2], rotation=45, ha='right')  # Use midpoints and labels for each pair
plt.xlabel('Execution Type')
plt.ylabel('Test Accuracy')
plt.title(f'Adversarial Accuracy of Different Models with {attack_type} ({attack_parameters}) - Adversarial Data Generated by transaxx Model')
plt.legend()
plt.tight_layout()
plt.show(block=True)
